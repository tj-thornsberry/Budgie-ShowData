#! /usr/bin/python3
import re

import gi

gi.require_version("Gtk", "3.0")
gi.require_version("Gdk", "3.0")
from gi.repository import Gtk, Gdk, GObject, Pango
from threading import Thread
import cairo
import time
import signal
import subprocess
import datatools as clt

"""
Budgie ShowData
Author: TJ Thornsberry
"""

yesterday_color = clt.hexcolor(clt.config["COLORS"]["yesterday"])
today_color = clt.hexcolor(clt.config["COLORS"]["today"])
week_color = clt.hexcolor(clt.config["COLORS"]["week"])
month_color = clt.hexcolor(clt.config["COLORS"]["month"])
shadow_color = clt.hexcolor(clt.config["COLORS"]["shadow"])
display_shadow = not clt.config["MUTE"].getboolean("shadow")
font = clt.get_font()


def add_css_to_text(label, hexcol="#000000"):
    css_text = """
    .csstext {
        padding: 0 0 0em 0;
        font-weight: 400;
    }
    """.encode()
    if display_shadow:
        css_text = """
            .csstext {
                padding: 0 0 0em 0;
                font-weight: 400;
                text-shadow: 0 0 3px hexcolor;
            }
            """
        css_text = css_text.replace("hexcolor", hexcol).encode()
    provider = Gtk.CssProvider.new()
    provider.load_from_data(
        css_text
    )
    color_cont = label.get_style_context()
    color_cont.add_class("csstext")
    Gtk.StyleContext.add_provider(
        color_cont,
        provider,
        Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION,
    )


class ShowDataWin(Gtk.Window):
    def __init__(self):

        Gtk.Window.__init__(self, title="PrVflash")

        self.set_keep_below(True)
        self.set_wmclass("Showdata", "showdata")
        self.set_type_hint(Gdk.WindowTypeHint.DESKTOP)
        self.set_decorated(False)
        self.connect("destroy", Gtk.main_quit)
        self.set_skip_taskbar_hint(True)

        screen = self.get_screen()
        visual = screen.get_rgba_visual()
        if all([visual, screen.is_composited()]):
            self.set_visual(visual)
        self.set_app_paintable(True)
        self.connect("draw", self.area_draw)

        self.datagrid = Gtk.Grid()
        self.yesterdaylabel = Gtk.Label("")
        self.todaylabel = Gtk.Label("")
        self.weeklabel = Gtk.Label("")
        self.monthlabel = Gtk.Label("")
        self.cyclelabel = Gtk.Label("")

        self.yesterdaylabel.modify_font(Pango.FontDescription(font + " 20"))
        self.yesterdaylabel.modify_fg(Gtk.StateFlags.NORMAL,
                                      Gdk.color_parse(yesterday_color))
        self.yesterdaylabel.set_xalign(0.5)
        self.todaylabel.modify_font(Pango.FontDescription(font + " 20"))
        self.todaylabel.modify_fg(Gtk.StateFlags.NORMAL,
                                  Gdk.color_parse(today_color))
        self.todaylabel.set_xalign(0.5)
        self.weeklabel.modify_font(Pango.FontDescription(font + " 20"))
        self.weeklabel.modify_fg(Gtk.StateFlags.NORMAL,
                                 Gdk.color_parse(week_color))
        self.weeklabel.set_xalign(0.5)
        self.monthlabel.modify_font(Pango.FontDescription(font + " 20"))
        self.monthlabel.modify_fg(Gtk.StateFlags.NORMAL,
                                  Gdk.color_parse(month_color))
        self.monthlabel.set_xalign(0.5)
        self.cyclelabel.modify_font(Pango.FontDescription(font + " 20"))
        self.cyclelabel.modify_fg(Gtk.StateFlags.NORMAL,
                                  Gdk.color_parse(month_color))
        self.cyclelabel.set_xalign(0.5)
        add_css_to_text(self.yesterdaylabel, shadow_color)
        add_css_to_text(self.todaylabel, shadow_color)
        add_css_to_text(self.weeklabel, shadow_color)
        add_css_to_text(self.monthlabel, shadow_color)
        add_css_to_text(self.cyclelabel, shadow_color)
        labels = [self.yesterdaylabel, self.todaylabel, self.weeklabel, self.monthlabel, self.cyclelabel]
        for i, x in enumerate([muteyesterday, mutetoday, muteweek, mutemonth, mutecycle]):
            if not x:
                self.datagrid.attach(labels[i], 0, i, 1, 1)
        # self.datagrid.attach(self.yesterdaylabel, 0, 0, 1, 1)
        # self.datagrid.attach(self.todaylabel, 0, 1, 1, 1)
        # self.datagrid.attach(self.weeklabel, 0, 2, 1, 1)
        # self.datagrid.attach(self.monthlabel, 0, 3, 1, 1)
        # self.datagrid.attach(self.cyclelabel, 0, 4, 1, 1)
        self.add(self.datagrid)

        self.set_textposition()
        self.interface = clt.config["GENERAL"]["interface"]
        self.show_all()
        self.update = Thread(target=self.show_data)

        self.update.setDaemon(True)
        self.update.start()

    def set_textposition(self):
        pos = clt.get_textposition()
        self.move(pos[1], pos[2])

    def show_data(self):
        wait = 1
        if clt.config["GENERAL"]["display"] == "1":
            yesterday = "Yesterday: {}"
            today = "Today: {}"
            week = "Week: {}"
            month = "Month: {}"
            billing_cycle = "{} days left"
        elif clt.config["GENERAL"]["display"] == "2":
            yesterday = "Yesterday's usage was {}"
            today = "Today's usage is {}"
            week = "This week's usage is {}"
            month = "This month's usage is {} out of 500 GiB"
            billing_cycle = "There are {} days remaining in this billing cycle"
            if clt.vnstat_config["UnitMode"] == '1':
                month = month.replace("GiB", "GB")
        elif clt.config["GENERAL"]["display"] == "3":
            yesterday = ""
            today = ""
            week = "Usage: {}"
            month = "Remaining: {}"
            billing_cycle = "Days left: {}"
        else:
            yesterday = "{}"
            today = "{}"
            week = "{}"
            month = "{}"
            billing_cycle = "{} days left"
        while True:
            if not muteyesterday or not mutetoday:
                if not clt.config["GENERAL"]["display"] == "3":
                    info = subprocess.run(["vnstat", "-i", self.interface], stdout=subprocess.PIPE,
                                          stderr=subprocess.PIPE,
                                          universal_newlines=True).stdout
                    if not muteyesterday:
                        result = re.search("yesterday +([\d]+.[\d]+ [\w]+)", info)
                        if result:
                            x = yesterday.format(result.group(1))
                        else:
                            x = yesterday.format("0 MiB")
                        GObject.idle_add(
                            self.yesterdaylabel.set_text,
                            x,
                            priority=GObject.PRIORITY_DEFAULT
                        )
                    if not mutetoday:
                        result = re.search("today +([\d]+.[\d]+ [\w]+)", info)
                        if result:
                            x = today.format(result.group(1))
                        else:
                            x = today.format("0 MiB")
                        GObject.idle_add(
                            self.todaylabel.set_text,
                            x,
                            priority=GObject.PRIORITY_DEFAULT
                        )
            if not muteweek:
                if not clt.config["GENERAL"]["display"] == "3":
                    info = subprocess.run(["vnstat", "-w", "-i", self.interface], stdout=subprocess.PIPE,
                                          stderr=subprocess.PIPE, universal_newlines=True).stdout
                    result = re.search("current week +([\d]+.[\d]+ [\w]+)", info)
                    if result:
                        x = week.format(result.group(1))
                    else:
                        x = week.format("0 MiB")
                else:
                    info = subprocess.run(["vnstat", "-m", "-i", self.interface], stdout=subprocess.PIPE,
                                          stderr=subprocess.PIPE, universal_newlines=True).stdout
                    result = re.search("'\d\d +([\d]+.[\d]+ [\w]+)", info)
                    if result:
                        x = week.format(result.group(1))
                    else:
                        x = week.format("0 MiB")
                GObject.idle_add(
                    self.weeklabel.set_text,
                    x,
                    priority=GObject.PRIORITY_DEFAULT
                )
            if not mutemonth:

                info = subprocess.run(["vnstat", "-m", "-i", self.interface], stdout=subprocess.PIPE,
                                      stderr=subprocess.PIPE, universal_newlines=True).stdout
                if not clt.config["GENERAL"]["display"] == "3":
                    result = re.search("'\d\d +([\d]+.[\d]+ [\w]+)", info)
                    if result:
                        x = month.format(result.group(1))
                    else:
                        x = month.format("0 MiB")
                else:
                    result = re.search("'\d\d +([\d]+.[\d]+) ([\w]+)", info)
                    if result:
                        if "M" in result.group(2):
                            x = month.format(str(500-float(result.group(1))*1024))
                        else:
                            x = month.format(str(500 - float(result.group(1))))
                    else:
                        x = month.format("0 MiB")
                GObject.idle_add(
                    self.monthlabel.set_text,
                    x,
                    priority=GObject.PRIORITY_DEFAULT
                )
            if not mutecycle:
                GObject.idle_add(
                    self.cyclelabel.set_text,
                    billing_cycle.format(int(clt.get_days_in_cycle()))
                )
            time.sleep(wait)

    def stop(self, *args):
        Gtk.main_quit()

    def area_draw(self, widget, cr):
        # set transparent color
        cr.set_source_rgba(0.2, 0.2, 0.2, 0)
        cr.set_operator(cairo.OPERATOR_SOURCE)
        cr.paint()
        cr.set_operator(cairo.OPERATOR_OVER)


def show():
    ShowDataWin()
    GObject.threads_init()
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    Gtk.main()


muteyesterday = clt.config["MUTE"].getboolean("yesterday")
mutetoday = clt.config["MUTE"].getboolean("today")
muteweek = clt.config["MUTE"].getboolean("week")
mutemonth = clt.config["MUTE"].getboolean("month")
mutecycle = clt.config["MUTE"].getboolean("cycle")

# only run clock if it should actually show something
if not all([muteyesterday, mutetoday, muteweek, mutemonth]):
    show()
